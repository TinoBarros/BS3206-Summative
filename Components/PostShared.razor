@using Microsoft.EntityFrameworkCore
@inherits ComponentBase
@rendermode InteractiveServer

@inject AppDbContext dbContext
@inject NavigationManager NavigationManager

@if (!deleted) {
<article class="subtle-container">
    <div class="flex-horizontal">
        <div class="flex-vertical center">
            @if (Post.User?.ProfileImage != null)
            {
                var profileImgBase64 = $"data:image/png;base64,{Convert.ToBase64String(Post.User.ProfileImage)}";
                <img src="@profileImgBase64" alt="User profile" class="avatar-image" />
            }
            else
            {
                <div class="avatar-placeholder"></div>
            }
        </div>
        <div class="flex-vertical">
            <span>@Post.User?.DisplayName</span>
            @if (IsPreview)
            {
                <span class="font-small">@Post.Timestamp.ToString("MM/dd/yyyy HH:mm")</span>
            }
            else
            {
                <a href="/post/@Post.PostId" class="font-small">@Post.Timestamp.ToString("MM/dd/yyyy HH:mm")</a>
            }
        </div>
    </div>
    @if (isEditing)
    {
        <div class="flex-vertical">
            <h1>Edit Post</h1>
            <input class="input-single-line fill-width" @bind="editSubject" maxlength="100" placeholder="Subject" />
            <textarea class="input-multi-line fill-width" @bind="editDescription" rows=6 maxlength="1000"
                placeholder="Description"></textarea>
        </div>
        <div class="flex-horizontal flex-end">
            <button class="button-optional-action" @onclick="() => isEditing = false">Cancel</button>
            <button class="button-suggested-action" @onclick="() => SaveEdit(Post.PostId)">Save</button>
        </div>
    }
    else
    {
        <div class="flex-vertical">
            <h1>@Post.Subject</h1>
            <p>@Post.Description</p>
        </div>
    }
    @if (Post.Images != null && Post.Images.Any())
    {
        foreach (var image in Post.Images)
        {
            var base64 = Convert.ToBase64String(image.ImageData);
            var imgSrc = $"data:{image.ContentType};base64,{base64}";
            <img src="@imgSrc" alt="Post image" class="Post-image" @onclick="() => OpenImageViewer(imgSrc)" />
        }
    }

    <div class=round-button-container>
        <RoundButton IconPath="/icon/bx-like.svg" ActiveIconPath="/icon/bxs-like.svg" Count=@Post.Likes.Count
            Active=@(isLiked()) OnClick="() => OnLikeButtonClick(Post)" />
        <RoundButton IconPath="/icon/bx-share-alt.svg" ActiveIconPath="/icon/bxs-share-alt.svg" Count=@Post.Shares.Count
            Active=@(isShared()) OnClick="() => OnShareButtonClick(Post)" />
        <RoundButton IconPath="/icon/bx-reply.svg" ActiveIconPath="/icon/bx-reply.svg" Count=@Post.Comments.Count
            Active=false OnClick=OnReplyClicked />
    </div>
    @if (CanEditPost(Post) || CanDeletePost(Post))
    {
        <div class="flex-horizontal">
            @if (CanEditPost(Post))
            {
                <button class="button-suggested-action" @onclick="() => StartEditPost(Post)">‚úèÔ∏è Edit</button>
            }
            @if (CanDeletePost(Post))
            {
                <button class="button-destructive-action" @onclick="@(() => ConfirmDelete(Post.PostId))">üóëÔ∏è Delete</button>
            }
        </div>
    }

    @* <div class="flex-horizontal">
        <input class="input-single-line fill-width grow" @bind="commentTexts[Post.PostId]"
            placeholder="Add a comment..." maxlength="100" />
        <button class="button-suggested-action shrink" @onclick="@(() => AddComment(Post.PostId))">Post</button>
    </div>

    <div class="flex-vertical">
        @if (CommentsByPostId.TryGetValue(Post.PostId, out var comments))
        {
            <p>Comments</p>
            @foreach (var comment in comments)
            {
                <div class="flex-horizontal">
                    <div class="flex-vertical">
                        @if (comment.User?.ProfileImage != null)
                        {
                            var profileImgBase64 = $"data:image/png;base64,{Convert.ToBase64String(comment.User.ProfileImage)}";
                            <img src="@profileImgBase64" alt="User profile" class="comment-avatar" />
                        }
                        else
                        {
                            <div class="avatar-placeholder"></div>
                        }
                    </div>
                    <div class="flex-vertical">
                        <div class="flex-horizontal">
                            <div class="comment-header">
                                <strong>@comment.User?.DisplayName</strong><br />
                            </div>
                            <span class="timestamp">@comment.Timestamp.ToString("MM/dd/yyyy HH:mm")</span>
                        </div>
                        <div class="comment-text">@comment.Description</div>
                    </div>
                    @if (CanDeletePost(comment))
                    {
                        <div class="flex-horizontal flex-end grow">
                            <button class="button-destructive-action flex-end" style="height: fit-content;"
                                @onclick="@(() => ConfirmDelete(comment.PostId))">Delete</button>
                        </div>
                    }
                </div>
            }
        }
    </div> *@
</article>
}

@if (imageViewerImageSrc != null)
{
    <div class="image-viewer-backdrop" @onclick="() => imageViewerImageSrc = null">
        <div class="image-viewer-content" @onclick:stopPropagation>
            <img src="@imageViewerImageSrc" alt="Full view" />
            <button class="close-button" @onclick="() => imageViewerImageSrc = null">‚úï</button>
        </div>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal-backdrop pad-top">
        <div class="modal subtle-container">
            <strong>Are you sure you want to delete this post? This action cannot be undone.</strong>
            <div class="flex-horizontal center pad-top">
                <button class="button-suggested-action" @onclick="() => showDeleteConfirmation = false">Cancel</button>
                <button class="button-destructive-action" @onclick="DeleteConfirmed">Delete post</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsPreview { get; set; } = false;
    [Parameter]
    public Data.User? CurrentUser { get; set; }
    [Parameter]
    public required Data.Post Post { get; set; }

    private bool deleted = false;
    private bool isEditing = false;
    private bool showDeleteConfirmation = false;
    private string? imageViewerImageSrc = null;
    private string editSubject = "";
    private string editDescription = "";

    //Checks if logged-in user is allowed to delete post (either an admin or is their own post)
    private bool CanDeletePost(Data.Post post)
    {
        if (IsPreview || CurrentUser == null)
            return false;
        if (CurrentUser.IsAdmin)
            return true;

        return post.User.UserId == CurrentUser.UserId;
    }

    //checks if logged in user is allowed to edit posts (owned by them)
    private bool CanEditPost(Data.Post post)
    {
        if (IsPreview)
            return false;
        if (CurrentUser == null)
            return false;
        return post.User.UserId == CurrentUser.UserId;
    }

    private bool isLiked()
    {
        if (IsPreview || CurrentUser == null)
            return false;
        
        return CurrentUser.Likes.Where(l => l.PostId == Post.PostId).Any();
    }

    private bool isShared()
    {
        if (IsPreview || CurrentUser == null)
            return false;
        
        return CurrentUser.Shares.Where(l => l.PostId == Post.PostId).Any();
    }

    private async Task OnLikeButtonClick(Data.Post post)
    {
        if (IsPreview || CurrentUser == null)
            return;

        var existingLike = await dbContext.Likes
        .FirstOrDefaultAsync(l => l.PostId == post.PostId && l.UserId == CurrentUser.UserId);

        if (existingLike != null)
        {
            dbContext.Likes.Remove(existingLike);
        }
        else
        {
            var like = new Data.Like
            {
                PostId = post.PostId,
                UserId = CurrentUser.UserId
            };
            dbContext.Likes.Add(like);
        }

        await dbContext.SaveChangesAsync();

        var updatedPost = await dbContext.Posts
        .Include(p => p.Likes)
        .FirstOrDefaultAsync(p => p.PostId == post.PostId);

        if (updatedPost != null)
        {
            post.Likes = updatedPost.Likes;
        }
    }

    private async Task OnShareButtonClick(Data.Post post)
    {
        if (IsPreview || CurrentUser == null)
            return;

        var existingShare = await dbContext.Share
        .FirstOrDefaultAsync(s => s.PostId == post.PostId && s.UserId == CurrentUser.UserId);

        if (existingShare != null)
        {
            dbContext.Share.Remove(existingShare);
        }
        else
        {
            var share = new Data.Share
            {
                PostId = post.PostId,
                UserId = CurrentUser.UserId
            };
            dbContext.Share.Add(share);
        }

        await dbContext.SaveChangesAsync();

        var updatedPost = await dbContext.Posts
        .Include(p => p.Shares)
        .FirstOrDefaultAsync(p => p.PostId == post.PostId);

        if (updatedPost != null)
        {
            post.Shares = updatedPost.Shares;
        }
    }

    private void OpenImageViewer(string imgSrc)
    {
        imageViewerImageSrc = imgSrc;
    }

    private void CloseImageViewer()
    {
        imageViewerImageSrc = null;
    }

    //shows confirmation screen for deletion
    private void ConfirmDelete(Guid postId)
    {
        showDeleteConfirmation = true;
    }

    //executes the post deletion
    private async Task DeleteConfirmed()
    {
        await DeletePost((Guid)Post.PostId);
        showDeleteConfirmation = false;
        deleted = true;
    }

    //deletes post from database
    private async Task DeletePost(Guid postId)
    {
        var postToDelete = await dbContext.Posts.FindAsync(postId);
        if (postToDelete != null)
        {
            dbContext.Posts.Remove(postToDelete);
            await dbContext.SaveChangesAsync();
        }
    }

    //starts the in line post editor
    private void StartEditPost(Data.Post post)
    {
        isEditing = true;
        editSubject = post.Subject;
        editDescription = post.Description;
    }

    //saves the edited post to the database
    private async Task SaveEdit(Guid postId)
    {
        var post = await dbContext.Posts.FindAsync(postId);
        if (post != null)
        {
            post.Subject = editSubject;
            post.Description = editDescription;
            await dbContext.SaveChangesAsync();
            isEditing = false;
            // TODO event this
            @* await ShowToastMessage("Post updated successfully."); *@
        }
        isEditing = false;
        // TODO event this
        @* await OnInitializedAsync(); *@
    }

    private void OnReplyClicked()
    {
        if (IsPreview)
            return;
        NavigationManager.NavigateTo($"/post/{Post.PostId}", true);
    }
}