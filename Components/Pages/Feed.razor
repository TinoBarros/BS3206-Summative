@page "/feed"
@inject AppDbContext _dbContext
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using Data
@attribute [Authorize]
@inject ILogger<Feed> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Feed</PageTitle>

@if (ShowToast)
{
    <div class="toast">
        @ToastMessage
    </div>
}

<div class="flex-horizontal center">
    <h1 class="grow">Post Feed</h1>
    <button class="button-suggested-action" @onclick="NavigateToCreatePost">+ Create Post</button>
</div>

@if (Posts == null || !Posts.Any())
{
    <div class="no-posts-message">
        <i class="fas fa-ban" style="font-size: 2rem; color: #ff6347;"></i>
        <p>No posts yet. Follow users to see their posts!</p>
    </div>
}
else
{
    @foreach (var post in Posts)
    {
        <PostShared Post=post CurrentUser=CurrentUser />
    }
}

@code {
    private bool isLoading = true;
    private int authRetryCount = 0;
    private const int MAX_AUTH_RETRIES = 3;
    private string newCommentText = string.Empty;
    private List<Data.Post> Posts { get; set; } = new();

    private Dictionary<Guid, string> commentTexts = new();
    private Dictionary<Guid, List<Data.Post>> CommentsByPostId = new();
    private Dictionary<Guid, bool> likedPosts = new();
    private Dictionary<Guid, bool> sharedPosts = new();

    private bool ShowToast { get; set; } = false;
    private string ToastMessage { get; set; } = "";
    private User? CurrentUser { get; set; }
    private bool IsAdmin => CurrentUser?.IsAdmin ?? false;
    private bool showDeleteConfirmation = false;
    private Guid? postIdToDelete = null;
    private Guid? editingPostId = null;
    private string editSubject = string.Empty;
    private string editDescription = string.Empty;

    //show toast notifications
    private async Task ShowToastMessage(string message)
    {
        ToastMessage = message;
        ShowToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        ShowToast = false;
        StateHasChanged();
    }


    //initialise compoenent and load posts
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

        if (!string.IsNullOrEmpty(email))
        {
            CurrentUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
        }

        Posts = await _dbContext.Posts
        .Where(p => p.ParentPostId == null)
        .Include(p => p.User)
        .Include(p => p.Images)
        .Include(p => p.Likes)
        .OrderByDescending(p => p.Timestamp)
        .ToListAsync();

        var allComments = await _dbContext.Posts
        .Where(p => p.ParentPostId != null)
        .Include(p => p.User)
        .ToListAsync();

        CommentsByPostId = allComments
        .GroupBy(c => c.ParentPostId.Value)
        .ToDictionary(g => g.Key, g => g.ToList());


        foreach (var post in Posts)
        {
            if (!commentTexts.ContainsKey(post.PostId))
            {
                commentTexts[post.PostId] = string.Empty;
            }
        }
    }

    //navigates to create post page
    private void NavigateToCreatePost()
    {
        NavigationManager.NavigateTo("/create-post");
    }


    //hides the in line editing if edit cancelled
    private void CancelEdit()
    {
        editingPostId = null;
    }


    //authenticate user
    private async Task CheckAuthenticationStateAsync()
    {
        try
        {
            isLoading = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity?.IsAuthenticated ?? false)
            {
                string currentUser = authState.User.Identity.Name ?? "User";
                Logger.LogInformation("User authenticated: {currentUser}", currentUser);
            }
            else
            {
                Logger.LogWarning("User not authenticated, attempt {RetryCount} of {MaxRetries}",
                authRetryCount + 1, MAX_AUTH_RETRIES);

                if (authRetryCount < MAX_AUTH_RETRIES)
                {
                    authRetryCount++;
                    await Task.Delay(500);
                    await CheckAuthenticationStateAsync();
                }
                else
                {
                    Logger.LogWarning("Max authentication retries reached, redirecting to login");
                    RedirectToLogin();
                }
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    //redirect to login if not authenticated
    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", forceLoad: true);
    }

    //adds a comment to a post
    private async Task AddComment(Guid parentPostId)
    {
        if (!commentTexts.ContainsKey(parentPostId) || string.IsNullOrWhiteSpace(commentTexts[parentPostId]))
        {
            await ShowToastMessage("Comment Cannot Be empty.");
            return;
        }
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;

            if (!userClaims.Identity?.IsAuthenticated ?? true)
            {
                RedirectToLogin();
                return;
            }

            var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
            if (string.IsNullOrEmpty(email))
            {
                await ShowToastMessage("Invalid user email.");
                RedirectToLogin();
                return;
            }

            var currentUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
            if (currentUser == null)
            {
                await ShowToastMessage("User not found.");
                RedirectToLogin();
                return;
            }

            var parentPost = await _dbContext.Posts.FindAsync(parentPostId);
            if (parentPost == null)
            {
                await ShowToastMessage("Parent post not found.");
                return;
            }


            var comment = new Data.Post
            {
                User = currentUser,
                UserId = currentUser.UserId,
                Subject = "Re: " + parentPost.Subject,
                Description = commentTexts[parentPostId],
                Timestamp = DateTime.UtcNow,
                ParentPostId = parentPostId,
                Comments = 0
            };

            _dbContext.Posts.Add(comment);
            parentPost.Comments++;
            await _dbContext.SaveChangesAsync();
            await OnInitializedAsync();
            commentTexts[parentPostId] = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding comment.");
            await ShowToastMessage("Failed to post comment.");
        }
    }
}
