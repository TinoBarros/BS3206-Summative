@page "/feed"
@inject AppDbContext _dbContext
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using Data
@attribute [Authorize]
@inject ILogger<Feed> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Feed</PageTitle>

@if (ShowToast)
{
    <div class="toast">
        @ToastMessage
    </div>
}

<div class="flex-horizontal center">
    <h1 class="grow">Post Feed</h1>
    <a href="/create-post" class="button-suggested-action">+ Create Post</a>
</div>

<FeedShared Posts=Posts />

@code {
    [CascadingParameter]
    private Session? Session { get; set; }

    private bool isLoading = true;
    private int authRetryCount = 0;
    private const int MAX_AUTH_RETRIES = 3;
    private List<Data.Post> Posts { get; set; } = new();

    private bool ShowToast { get; set; } = false;
    private string ToastMessage { get; set; } = "";

    //show toast notifications
    private async Task ShowToastMessage(string message)
    {
        ToastMessage = message;
        ShowToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        ShowToast = false;
        StateHasChanged();
    }


    //initialise compoenent and load posts
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

        if (!string.IsNullOrEmpty(email))
        {
            Session!.CurrentUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
        }

        var userId = Session!.CurrentUser!.UserId;

        Posts = await _dbContext.Posts
        .Where(p => p.ParentPostId == null)
        // this query sucks and is massively un-performant but
        // I don't have time to do better.
        .Where(
            // the post is by the current user
            p => p.UserId == userId
            // ...or the post is by someone they follow
            || _dbContext.Follow
            .Where(f => f.UserId == userId)
            .Where(f => f.FollowedUserId == p.UserId)
            .Any()
            // ...or the post was shared by someone they follow
            || _dbContext.Share
            .Where(s => s.PostId == p.PostId)
            .Where(s => _dbContext.Follow
                .Where(f => f.UserId == userId)
                .Where(f => f.FollowedUserId == s.UserId)
                .Any()
            ).Any()
        )
        .Include(p => p.User)
        .Include(p => p.Images)
        .Include(p => p.Likes)
        .Include(p => p.Shares)
        .OrderByDescending(p => p.Timestamp)
        .ToListAsync();
    }

    //authenticate user
    private async Task CheckAuthenticationStateAsync()
    {
        try
        {
            isLoading = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity?.IsAuthenticated ?? false)
            {
                string currentUser = authState.User.Identity.Name ?? "User";
                Logger.LogInformation("User authenticated: {currentUser}", currentUser);
            }
            else
            {
                Logger.LogWarning("User not authenticated, attempt {RetryCount} of {MaxRetries}",
                authRetryCount + 1, MAX_AUTH_RETRIES);

                if (authRetryCount < MAX_AUTH_RETRIES)
                {
                    authRetryCount++;
                    await Task.Delay(500);
                    await CheckAuthenticationStateAsync();
                }
                else
                {
                    Logger.LogWarning("Max authentication retries reached, redirecting to login");
                    RedirectToLogin();
                }
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    //redirect to login if not authenticated
    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", forceLoad: true);
    }

}
