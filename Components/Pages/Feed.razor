@page "/feed"
@inject AppDbContext _dbContext
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using Data
@attribute [Authorize]
@inject ILogger<Feed> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Feed</PageTitle>

@if (ShowToast)
{
    <div class="toast">
        @ToastMessage
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal-backdrop">
        <div class="modal">
            <p>Are you sure you want to delete this post? This action cannot be undone.</p>
            <div class="flex-horizontal center">
                <button class="button-destructive-action" @onclick="DeleteConfirmed">Delete post</button>
                <button class="button-suggested-action" @onclick="CancelDelete">Cancel</button>
            </div>
        </div>
    </div>
}

<div class="flex-horizontal center">
    <h1 class="grow">Post Feed</h1>
    <button class="button-suggested-action" @onclick="NavigateToCreatePost">+ Create Post</button>
</div>

@if (Posts == null || !Posts.Any())
{
    <div class="no-posts-message">
        <i class="fas fa-ban" style="font-size: 2rem; color: #ff6347;"></i>
        <p>No posts yet. Follow users to see their posts!</p>
    </div>
}
else
{
    @foreach (var post in Posts)
    {
        <article class="subtle-container">
            <div class="flex-horizontal">
                <div class="flex-vertical center">
                    @if (post.User?.ProfileImage != null)
                    {
                        var profileImgBase64 = $"data:image/png;base64,{Convert.ToBase64String(post.User.ProfileImage)}";
                        <img src="@profileImgBase64" alt="User profile" class="avatar-image" />
                    }
                    else
                    {
                        <div class="avatar-placeholder"></div>
                    }
                </div>
                <div class="flex-vertical">
                    <span>@post.User?.DisplayName</span><br />
                    <span class="timestamp">@post.Timestamp.ToString("MM/dd/yyyy HH:mm")</span>
                </div>
            </div>
            @if (editingPostId == post.PostId)
            {
                <div class="flex-vertical">
                    <h1>Edit Post</h1>
                    <input class="input-single-line fill-width" @bind="editSubject" maxlength="100" placeholder="Subject" />
                    <textarea class="input-multi-line fill-width" @bind="editDescription" rows=6 maxlength="1000"
                        placeholder="Description"></textarea>
                </div>
                <div class="flex-horizontal flex-end">
                    <button class="button-optional-action" @onclick="CancelEdit">Cancel</button>
                    <button class="button-suggested-action" @onclick="() => SaveEdit(post.PostId)">Save</button>
                </div>
            }
            else
            {
                <div class="flex-vertical">
                    <h1>@post.Subject</h1>
                    <p>@post.Description</p>
                </div>
            }
            @if (post.Images != null && post.Images.Any())
            {
                foreach (var image in post.Images)
                {
                    var base64 = Convert.ToBase64String(image.ImageData);
                    var imgSrc = $"data:{image.ContentType};base64,{base64}";
                    <img src="@imgSrc" alt="Post image" class="post-image" @onclick="() => OpenImageViewer(imgSrc)" />
                }
            }

            <div class=round-button-container>
                <RoundButton IconPath="/icon/bx-like.svg" ActiveIconPath="/icon/bxs-like.svg" Count=@post.Likes.Count
                    Active=@(likedPosts.ContainsKey(post.PostId) && likedPosts[post.PostId])
                    OnClick="() => OnLikeButtonClick(post)" />
                <RoundButton IconPath="/icon/bx-share-alt.svg" ActiveIconPath="/icon/bxs-share-alt.svg" Count=@post.Shares.Count
                    Active=@(sharedPosts.ContainsKey(post.PostId) && sharedPosts[post.PostId])
                    OnClick="() => OnShareButtonClick(post)" />
                <button class="round-button">
                    <div class="icon-mask" style='mask-image: url("/icon/bx-reply.svg");'></div>@post.Comments
                </button>
            </div>
            @if (CanEditPost(post) || CanDeletePost(post))
            {
                <div class="action-buttons">
                    @if (CanEditPost(post))
                    {
                        <button class="button-suggested-action" @onclick="() => StartEditPost(post)">‚úèÔ∏è Edit</button>
                    }
                    @if (CanDeletePost(post))
                    {
                        <button class="button-destructive-action" @onclick="@(() => ConfirmDelete(post.PostId))">üóëÔ∏è Delete</button>
                    }
                </div>
            }

            <div class="flex-horizontal">
                <input class="input-single-line fill-width grow" @bind="commentTexts[post.PostId]"
                    placeholder="Add a comment..." maxlength="100" />
                <button class="button-suggested-action shrink" @onclick="@(() => AddComment(post.PostId))">Post</button>
            </div>

            <div class="flex-vertical">
                @if (CommentsByPostId.TryGetValue(post.PostId, out var comments))
                {
                    <p>Comments</p>
                    @foreach (var comment in comments)
                    {
                        <div class="flex-horizontal">
                            <div class="flex-vertical">
                                @if (comment.User?.ProfileImage != null)
                                {
                                    var profileImgBase64 = $"data:image/png;base64,{Convert.ToBase64String(comment.User.ProfileImage)}";
                                    <img src="@profileImgBase64" alt="User profile" class="comment-avatar" />
                                }
                                else
                                {
                                    <div class="avatar-placeholder"></div>
                                }
                            </div>
                            <div class="flex-vertical">
                                <div class="flex-horizontal">
                                    <div class="comment-header">
                                        <strong>@comment.User?.DisplayName</strong><br />
                                    </div>
                                    <span class="timestamp">@comment.Timestamp.ToString("MM/dd/yyyy HH:mm")</span>
                                </div>
                                <div class="comment-text">@comment.Description</div>
                            </div>
                            @if (CanDeletePost(comment))
                            {
                                <div class="flex-horizontal flex-end grow">
                                    <button class="button-destructive-action flex-end" style="height: fit-content;"
                                        @onclick="@(() => ConfirmDelete(comment.PostId))">Delete</button>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </article>
    }
}



@if (isImageViewerOpen)
{
    <div class="image-viewer-backdrop" @onclick="CloseImageViewer">
        <div class="image-viewer-content" @onclick:stopPropagation>
            <img src="@currentImageSrc" alt="Full view" />
            <button class="close-button" @onclick="CloseImageViewer">‚úï</button>
        </div>
    </div>
}



@code {
    private bool isLoading = true;
    private int authRetryCount = 0;
    private const int MAX_AUTH_RETRIES = 3;
    private bool isImageViewerOpen = false;
    private string currentImageSrc = string.Empty;
    private string newCommentText = string.Empty;
    private List<Data.Post> Posts { get; set; } = new();

    private Dictionary<Guid, string> commentTexts = new();
    private Dictionary<Guid, List<Data.Post>> CommentsByPostId = new();
    private Dictionary<Guid, bool> likedPosts = new();
    private Dictionary<Guid, bool> sharedPosts = new();

    private bool ShowToast { get; set; } = false;
    private string ToastMessage { get; set; } = "";
    private User? CurrentUser { get; set; }
    private bool IsAdmin => CurrentUser?.IsAdmin ?? false;
    private bool showDeleteConfirmation = false;
    private Guid? postIdToDelete = null;
    private Guid? editingPostId = null;
    private string editSubject = string.Empty;
    private string editDescription = string.Empty;

    //show toast notifications
    private async Task ShowToastMessage(string message)
    {
        ToastMessage = message;
        ShowToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        ShowToast = false;
        StateHasChanged();
    }


    //initialise compoenent and load posts
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

        if (!string.IsNullOrEmpty(email))
        {
            CurrentUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
        }

        Posts = await _dbContext.Posts
        .Where(p => p.ParentPostId == null)
        .Include(p => p.User)
        .Include(p => p.Images)
        .Include(p => p.Likes)
        .OrderByDescending(p => p.Timestamp)
        .ToListAsync();

        var allComments = await _dbContext.Posts
        .Where(p => p.ParentPostId != null)
        .Include(p => p.User)
        .ToListAsync();

        CommentsByPostId = allComments
        .GroupBy(c => c.ParentPostId.Value)
        .ToDictionary(g => g.Key, g => g.ToList());


        foreach (var post in Posts)
        {
            if (!commentTexts.ContainsKey(post.PostId))
            {
                commentTexts[post.PostId] = string.Empty;
            }
        }
    }

    //navigates to create post page
    private void NavigateToCreatePost()
    {
        NavigationManager.NavigateTo("/create-post");
    }

    //deletes post from database
    private async Task DeletePost(Guid postId)
    {
        var postToDelete = await _dbContext.Posts.FindAsync(postId);
        if (postToDelete != null)
        {
            _dbContext.Posts.Remove(postToDelete);
            await _dbContext.SaveChangesAsync();
        }
    }

    //shows confirmation screen for deletion
    private void ConfirmDelete(Guid postId)
    {
        postIdToDelete = postId;
        showDeleteConfirmation = true;
    }

    //executes the post deletion
    private async Task DeleteConfirmed()
    {
        await DeletePost((Guid)postIdToDelete!);
        showDeleteConfirmation = false;
        await OnInitializedAsync();
    }

    //hides confirmation screen if delete is cancelled
    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        postIdToDelete = null;
    }
    //Checks if logged-in user is allowed to delete post (either an admin or is their own post)
    private bool CanDeletePost(Data.Post post)
    {
        if (IsAdmin)
            return true;

        var currentUserEmail = CurrentUser?.Email;
        return post.User?.Email == currentUserEmail;
    }

    //checks if logged in user is allowed to edit posts (owned by them)
    private bool CanEditPost(Data.Post post)
    {
        var currentUserEmail = CurrentUser?.Email;
        return post.User?.Email == currentUserEmail;
    }

    //starts the in line post editor
    private void StartEditPost(Data.Post post)
    {
        editingPostId = post.PostId;
        editSubject = post.Subject;
        editDescription = post.Description;
    }

    //saves the edited post to the database
    private async Task SaveEdit(Guid postId)
    {
        var post = await _dbContext.Posts.FindAsync(postId);
        if (post != null)
        {
            post.Subject = editSubject;
            post.Description = editDescription;
            await _dbContext.SaveChangesAsync();
            editingPostId = null;
            await ShowToastMessage("Post updated successfully.");
        }
        editingPostId = null;
        await OnInitializedAsync();
    }

    //hides the in line editing if edit cancelled
    private void CancelEdit()
    {
        editingPostId = null;
    }


    //authenticate user
    private async Task CheckAuthenticationStateAsync()
    {
        try
        {
            isLoading = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity?.IsAuthenticated ?? false)
            {
                string currentUser = authState.User.Identity.Name ?? "User";
                Logger.LogInformation("User authenticated: {currentUser}", currentUser);
            }
            else
            {
                Logger.LogWarning("User not authenticated, attempt {RetryCount} of {MaxRetries}",
                authRetryCount + 1, MAX_AUTH_RETRIES);

                if (authRetryCount < MAX_AUTH_RETRIES)
                {
                    authRetryCount++;
                    await Task.Delay(500);
                    await CheckAuthenticationStateAsync();
                }
                else
                {
                    Logger.LogWarning("Max authentication retries reached, redirecting to login");
                    RedirectToLogin();
                }
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    //redirect to login if not authenticated
    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", forceLoad: true);
    }

    //opens the image previewer
    private void OpenImageViewer(string imgSrc)
    {
        currentImageSrc = imgSrc;
        isImageViewerOpen = true;
    }

    //closes image previewer
    private void CloseImageViewer()
    {
        isImageViewerOpen = false;
        currentImageSrc = string.Empty;
    }

    //adds a comment to a post
    private async Task AddComment(Guid parentPostId)
    {
        if (!commentTexts.ContainsKey(parentPostId) || string.IsNullOrWhiteSpace(commentTexts[parentPostId]))
        {
            await ShowToastMessage("Comment Cannot Be empty.");
            return;
        }
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;

            if (!userClaims.Identity?.IsAuthenticated ?? true)
            {
                RedirectToLogin();
                return;
            }

            var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
            if (string.IsNullOrEmpty(email))
            {
                await ShowToastMessage("Invalid user email.");
                RedirectToLogin();
                return;
            }

            var currentUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
            if (currentUser == null)
            {
                await ShowToastMessage("User not found.");
                RedirectToLogin();
                return;
            }

            var parentPost = await _dbContext.Posts.FindAsync(parentPostId);
            if (parentPost == null)
            {
                await ShowToastMessage("Parent post not found.");
                return;
            }


            var comment = new Data.Post
            {
                User = currentUser,
                UserId = currentUser.UserId,
                Subject = "Re: " + parentPost.Subject,
                Description = commentTexts[parentPostId],
                Timestamp = DateTime.UtcNow,
                ParentPostId = parentPostId,
                Comments = 0
            };

            _dbContext.Posts.Add(comment);
            parentPost.Comments++;
            await _dbContext.SaveChangesAsync();
            await OnInitializedAsync();
            commentTexts[parentPostId] = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding comment.");
            await ShowToastMessage("Failed to post comment.");
        }
    }

    //updatess like count and creates like
    private async Task OnLikeButtonClick(Data.Post post)
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

        var currentUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
        if (currentUser == null)
        {
            RedirectToLogin();
            return;
        }

        var existingLike = await _dbContext.Likes
        .FirstOrDefaultAsync(l => l.PostId == post.PostId && l.UserId == currentUser.UserId);

        if (existingLike != null)
        {
            _dbContext.Likes.Remove(existingLike);
            likedPosts[post.PostId] = false;
        }
        else
        {
            var like = new Data.Like
            {
                PostId = post.PostId,
                UserId = currentUser.UserId
            };
            _dbContext.Likes.Add(like);
            likedPosts[post.PostId] = true;
        }

        await _dbContext.SaveChangesAsync();


        var updatedPost = await _dbContext.Posts
        .Include(p => p.Likes)
        .FirstOrDefaultAsync(p => p.PostId == post.PostId);

        if (updatedPost != null)
        {
            post.Likes = updatedPost.Likes;
        }
    }

    private async Task OnShareButtonClick(Data.Post post)
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

        var currentUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
        if (currentUser == null)
        {
            RedirectToLogin();
            return;
        }

        var existingShare = await _dbContext.Share
        .FirstOrDefaultAsync(l => l.PostId == post.PostId && l.UserId == currentUser.UserId);

        if (existingShare != null)
        {
            _dbContext.Share.Remove(existingShare);
            sharedPosts[post.PostId] = false;
        }
        else
        {
            var like = new Data.Share
            {
                PostId = post.PostId,
                UserId = currentUser.UserId
            };
            _dbContext.Share.Add(like);
            sharedPosts[post.PostId] = true;
        }

        await _dbContext.SaveChangesAsync();


        var updatedPost = await _dbContext.Posts
        .Include(p => p.Shares)
        .FirstOrDefaultAsync(p => p.PostId == post.PostId);

        if (updatedPost != null)
        {
            post.Shares = updatedPost.Shares;
        }
    }
}
