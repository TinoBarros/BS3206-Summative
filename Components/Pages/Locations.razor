@page "/locations"
@using Microsoft.EntityFrameworkCore
@using Data
@using bs3206.Components
@inject Data.AppDbContext DbContext
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Locations</PageTitle>

<div class="flex-horizontal">
    <h1>Locations</h1>
    <div class="flex-horizontal fill-width grow flex-end">
        <button @onclick="() => showAddModal = true" class="button-suggested-action">
            + Add New Location
        </button>
    </div>
</div>

<div class="map-container">
    <div id="map"></div>
</div>

@if (showAddModal)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content subtle-container" @onclick:stopPropagation="true">
            <div class="flex-horizontal">
                <h1>Add New Location</h1>

                <div class="flex-horizontal grow flex-end">
                    <button @onclick="CloseModal" class="button-suggested-action" style="font-size: 24px;">&times;</button>
                </div>
            </div>
            <input @bind="newLocation.Name" placeholder="Location Name" class="input-single-line fill-width" />
            <textarea @bind="newLocation.Description" placeholder="Location Description"
            class="input-multi-line fill-width"></textarea>
            <InputFile OnChange="HandleFileSelected" />
            @if (selectedFile != null)
            {
                <button @onclick="ClearSelectedFile" class="button-destructive-action">Clear</button>
            }
            <input @bind="newLocation.MapUrl" placeholder="Google Maps URL (optional)"
                class="input-single-line fill-width" />
            <button @onclick="AddLocation" class="button-suggested-action">Add Location</button>
        </div>
    </div>
}

<div class="subtle-container flex-horizontal">
    <input type="text" @bind="searchTerm" placeholder="Search locations..." class="input-single-line"
        style="width: 100%" />
    <select @bind="sortOrder">
        <option value="newest">Newest First</option>
        <option value="oldest">Oldest First</option>
        <option value="mostLiked">Most Liked</option>
        <option value="leastLiked">Least Liked</option>
    </select>
    <button @onclick="SearchLocations" class="button-suggested-action">Search</button>
</div>
<div class="flex-vertical">
    @if (locations == null)
    {
        <p>Loading...</p>
    }
    else if (!locations.Any())
    {
        <p>No locations found.</p>
    }
    else
    {
        @foreach (var location in locations)
        {
            <article class="subtle-container">
                <div class="location-image">
                    @if (location.ImageData != null){
                        var base64 = Convert.ToBase64String(location.ImageData);
                        var imageUrl = $"data:{location.ContentType};base64,{base64}";
                        <img src="@imageUrl" alt="Preview image" class="preview-image" />
                    }
                </div>
                <div class="flex-horizontal">
                    <h1>@location.Name</h1>
                    <div class="flex-horizontal grow flex-end">
                        @if (!string.IsNullOrWhiteSpace(location.MapUrl))
                        {
                            <button class="button-suggested-action" @onclick="() => OpenMap(location.MapUrl)">Open Map</button>
                        }
                        @if (currentUser != null && currentUser.IsAdmin)
                        {
                            <button @onclick="() => DeleteLocation(location)" class="button-destructive-action">üóëÔ∏è Delete
                                location</button>
                        }
                    </div>
                </div>
                <p>@location.Description</p>
                <div class="flex-horizontal">
                    <div class="round-button-container">
                        <RoundButton Active=@(userLikes.ContainsKey(location.LocationId) && userLikes[location.LocationId])
                            Count=@location.ThumbsUp IconPath="/icon/bx-like.svg" ActiveIconPath="/icon/bxs-like.svg"
                            OnClick=@(() => ThumbsUp(location))></RoundButton>
                        <RoundButton Active=@(userDislikes.ContainsKey(location.LocationId) && userDislikes[location.LocationId])
                            Count=@location.ThumbsDown IconPath="/icon/bx-dislike.svg"
                            ActiveIconPath="/icon/bxs-dislike.svg" OnClick=@(() => ThumbsDown(location))></RoundButton>
                    </div>
                    <div class="flex-horizontal grow flex-end">
                        <span class="font-small">@location.CreatedAt.ToString("MMM dd, yyyy")</span>
                    </div>
                </div>
            </article>
        }
    }
</div>

@code {
    // Location data and UI state
    private List<Data.Location>? locations;
    private Data.Location newLocation = new() { Name = "" };
    private string searchTerm = "";
    private string sortOrder = "newest";
    private IBrowserFile? selectedFile;
    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB - can be changed if needed
    private readonly string[] AllowedExtensions = { ".jpg", ".jpeg", ".png", ".gif" };
    private DotNetObjectReference<Locations>? objRef;
    private Dictionary<Guid, bool> userLikes = new();
    private Dictionary<Guid, bool> userDislikes = new();
    private Data.User? currentUser;
    private bool showAddModal = false;

    // Initialise component and load user data
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var email = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
            if (!string.IsNullOrEmpty(email))
            {
                currentUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == email);
            }
        }
        await LoadLocations();
    }

    // Initialise map after component renders
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initMap", objRef);
        }
    }

    // Handle map click events from JavaScript
    [JSInvokable]
    public async Task OnMapClick(double lat, double lng)
    {
        await Task.CompletedTask;
    }

    // Clean up map reference when component is disposed
    public void Dispose()
    {
        objRef?.Dispose();
    }

    // Load locations and user interactions from database
    private async Task LoadLocations()
    {
        locations = await DbContext.Locations.ToListAsync();

        if (currentUser != null)
        {
            var interactions = await DbContext.LocationInteractions
            .Where(li => li.UserId == currentUser.UserId)
            .ToListAsync();

            foreach (var interaction in interactions)
            {
                userLikes[interaction.LocationId] = interaction.IsLiked;
                userDislikes[interaction.LocationId] = interaction.IsDisliked;
            }
        }

        SortLocations();
    }

    // Handle file selection for location images
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        if (file.Size > MaxFileSize)
        {
            return;
        }

        var extension = Path.GetExtension(file.Name).ToLowerInvariant();
        if (!AllowedExtensions.Contains(extension))
        {
            return;
        }

        selectedFile = file;
    }

    // Clear selected file
    private void ClearSelectedFile()
    {
        selectedFile = null;
    }

    // Close add location modal and reset form
    private void CloseModal()
    {
        showAddModal = false;
        newLocation = new() { Name = "" };
        selectedFile = null;
    }

    // Add new location with image upload
    private async Task AddLocation()
    {
        if (string.IsNullOrWhiteSpace(newLocation.Name))
            return;

        if (selectedFile != null)
        {
            using (var stream = new MemoryStream()) {
                await selectedFile.OpenReadStream(MaxFileSize).CopyToAsync(stream);

                newLocation.ImageData = stream.ToArray();
                newLocation.ContentType = selectedFile.ContentType;
            };
        }

        DbContext.Locations.Add(newLocation);
        await DbContext.SaveChangesAsync();
        CloseModal();
        await LoadLocations();
    }

    // Delete location and associated image file
    private async Task DeleteLocation(Data.Location location)
    {
        // Only allow admins to delete locations
        if (currentUser == null || !currentUser.IsAdmin)
        {
            return;
        }
        DbContext.Locations.Remove(location);
        await DbContext.SaveChangesAsync();
        await LoadLocations();
    }

    // Handle thumbs up interaction
    private async Task ThumbsUp(Data.Location location)
    {
        if (currentUser == null) return;

        var interaction = await DbContext.LocationInteractions
        .FirstOrDefaultAsync(li => li.UserId == currentUser.UserId && li.LocationId == location.LocationId);

        if (interaction == null)
        {
            interaction = new LocationInteraction
            {
                UserId = currentUser.UserId,
                LocationId = location.LocationId,
                IsLiked = true,
                IsDisliked = false
            };
            DbContext.LocationInteractions.Add(interaction);
            location.ThumbsUp++;
        }
        else
        {
            if (interaction.IsLiked)
            {
                // Remove like
                interaction.IsLiked = false;
                location.ThumbsUp--;
            }
            else
            {
                // Add like, remove dislike if present
                if (interaction.IsDisliked)
                {
                    interaction.IsDisliked = false;
                    location.ThumbsDown--;
                }
                interaction.IsLiked = true;
                location.ThumbsUp++;
            }
        }

        await DbContext.SaveChangesAsync();
        userLikes[location.LocationId] = interaction.IsLiked;
        userDislikes[location.LocationId] = interaction.IsDisliked;
        StateHasChanged();
    }

    // Handle thumbs down interaction
    private async Task ThumbsDown(Data.Location location)
    {
        if (currentUser == null) return;

        var interaction = await DbContext.LocationInteractions
        .FirstOrDefaultAsync(li => li.UserId == currentUser.UserId && li.LocationId == location.LocationId);

        if (interaction == null)
        {
            interaction = new LocationInteraction
            {
                UserId = currentUser.UserId,
                LocationId = location.LocationId,
                IsLiked = false,
                IsDisliked = true
            };
            DbContext.LocationInteractions.Add(interaction);
            location.ThumbsDown++;
        }
        else
        {
            if (interaction.IsDisliked)
            {
                // Remove dislike
                interaction.IsDisliked = false;
                location.ThumbsDown--;
            }
            else
            {
                // Add dislike, remove like if present
                if (interaction.IsLiked)
                {
                    interaction.IsLiked = false;
                    location.ThumbsUp--;
                }
                interaction.IsDisliked = true;
                location.ThumbsDown++;
            }
        }

        await DbContext.SaveChangesAsync();
        userLikes[location.LocationId] = interaction.IsLiked;
        userDislikes[location.LocationId] = interaction.IsDisliked;
        StateHasChanged();
    }

    // Sort locations based on selected criteria
    private void SortLocations()
    {
        if (locations == null) return;

        locations = sortOrder switch
        {
            "newest" => locations.OrderByDescending(l => l.CreatedAt).ToList(),
            "oldest" => locations.OrderBy(l => l.CreatedAt).ToList(),
            "mostLiked" => locations.OrderByDescending(l => l.ThumbsUp).ToList(),
            "leastLiked" => locations.OrderBy(l => l.ThumbsUp).ToList(),
            _ => locations
        };
    }

    // Filter locations based on search term
    private void SearchLocations()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            LoadLocations();
            return;
        }

        locations = locations?
        .Where(l => l.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
        l.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
    }

    // Open location map in new tab
    private void OpenMap(string url)
    {
        if (!string.IsNullOrWhiteSpace(url))
        {
            NavigationManager.NavigateTo(url, true, true);
        }
    }
}

<script>
    let map;
    let markers = [];

    window.initMap = async (dotNetRef) => {
        // Load Leaflet CSS
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
        document.head.appendChild(link);

        // Load Leaflet JS
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.onload = () => {
            // Initialise map
            map = L.map('map').setView([51.505, -0.09], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(map);

            // Add click handler
            map.on('click', (e) => {
                dotNetRef.invokeMethodAsync('OnMapClick', e.latlng.lat, e.latlng.lng);
            });
        };
        document.head.appendChild(script);
    };
</script>
