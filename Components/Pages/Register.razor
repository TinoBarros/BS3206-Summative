@page "/register"
@inject Data.AuthService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger
@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

<div class="flex-horizontal center expand">
    <div class="subtle-container" style="width: 350px;">
        <h1 class="center-text">Register</h1>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="font-error center-text">@errorMessage</div>
        }

        <form class="flex-vertical"@onsubmit:preventDefault @onsubmit="HandleRegister">
            <label>Name</label>
            <input type="text" class="input-single-line fill-width" @bind="name" @bind:event="oninput" required />
            @if (!string.IsNullOrEmpty(nameError))
            {
                <div class="font-error center-text">@nameError</div>
            }
        
            <label>Email</label>
            <input type="email" class="input-single-line fill-width" @bind="email" @bind:event="oninput" required />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <div class="font-error center-text">@emailError</div>
            }
        
            <label>Password</label>
            <input type="password" class="input-single-line fill-width" @bind="password" @bind:event="oninput" required />
            @if (!string.IsNullOrEmpty(passwordError))
            {
                <div class="font-error center-text">@passwordError</div>
            }
            
            <button type="submit" class="button-suggested-action fill-width" style="margin-top: 15px;">Register</button>
        </form>

        <a class="center-text" href="/login">Already have an account? Login here</a>
    </div>
</div>

@code {
    private string name = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;
    private string? nameError;
    private string? emailError;
    private string? passwordError;

    private bool ValidateForm()
    {
        bool isValid = true;
        nameError = null;
        emailError = null;
        passwordError = null;
        errorMessage = null;

        if (string.IsNullOrWhiteSpace(name))
        {
            nameError = "Name is required";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "Email is required";
            isValid = false;
        }
        else if (!email.Contains("@") || !email.Contains("."))
        {
            emailError = "Please enter a valid email address";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            passwordError = "Password is required";
            isValid = false;
        }
        else if (password.Length < 6)
        {
            passwordError = "Password must be at least 6 characters long";
            isValid = false;
        }

        return isValid;
    }

    private async Task HandleRegister()
    {
        try
        {
            if (!ValidateForm())
            {
                return;
            }

            Logger.LogInformation($"Attempting to register user with email: {email}");
            var result = await AuthService.RegisterAsync(name, email, password);

            if (result.Success)
            {
                Logger.LogInformation("Registration successful, redirecting to login");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                Logger.LogWarning($"Registration failed: {result.Message}");
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during registration");
            errorMessage = "An error occurred during registration. Please try again.";
        }
    }
} 