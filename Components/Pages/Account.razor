@page "/account"
@using Microsoft.EntityFrameworkCore
@using System.IO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@attribute [Authorize]
@inject Data.AuthService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<Account> Logger
@inject Data.AppDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Profile</PageTitle>

@if (isLoading)
{
    <div class="loading-container">
        <div>Loading profile...</div>
    </div>
}
else if (currentUser == null)
{
    <div class="loading-container">
        <div>Loading profile...</div>
    </div>
}
else
{
    <div class="profile-container">
        <div class="profile-header">
            <div class="profile-info-container">
                <div class="profile-avatar">
                    @if (currentUser.ProfileImage != null)
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(currentUser.ProfileImage)" alt="Profile" />
                    }
                    else
                    {
                        <img src="https://via.placeholder.com/150" alt="Profile" />
                    }
                </div>
                <div class="profile-info">
                    <h1>@currentUser.Name</h1>
                    <div class="location">üìç @currentUser.Location</div>
                    <p class="bio">@currentUser.Bio</p>
                    <div class="profile-actions">
                        <button class="button-suggested-action" @onclick="ShowEditProfile">Edit Profile</button>
                        <button class="button-secondary">Share Profile</button>
                    </div>
                </div>
            </div>

            <div class="profile-stats">
                <div class="stat-item">
                    <div class="stat-value">248</div>
                    <div class="stat-label">Posts</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">582</div>
                    <div class="stat-label">Following</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">1.4K</div>
                    <div class="stat-label">Followers</div>
                </div>
            </div>
        </div>
    </div>

    @if (showEditProfile)
    {
        <div class="modal-overlay" @onclick="HideEditProfile">
            <div class="modal" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h2>Edit Profile</h2>
                    <button class="close-button" @onclick="HideEditProfile">√ó</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Profile Picture</label>
                        <div class="profile-upload">
                            <InputFile OnChange="HandleImageUpload" class="file-input" accept=".jpg,.jpeg,.png" />
                            @if (imagePreviewUrl != null)
                            {
                                <img src="@imagePreviewUrl" alt="Preview" class="image-preview" />
                            }
                            else if (currentUser.ProfileImage != null)
                            {
                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(currentUser.ProfileImage)" alt="Current" class="image-preview" />
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Name</label>
                        <input type="text" class="input-single-line" @bind="editName" />
                    </div>
                    <div class="form-group">
                        <label>Location</label>
                        <input type="text" class="input-single-line" @bind="editLocation" placeholder="Enter your location" />
                    </div>
                    <div class="form-group">
                        <label>Bio</label>
                        <textarea class="input-multi-line" @bind="editBio"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" class="input-single-line" @bind="editEmail" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="button-secondary" @onclick="HideEditProfile">Cancel</button>
                    <button class="button-suggested-action" @onclick="SaveProfile">Save Changes</button>
                </div>
            </div>
        </div>
    }
}

@code {
    private Data.User? currentUser;
    private bool showEditProfile = false;
    private string? imagePreviewUrl;
    private byte[]? newProfileImage;
    private bool isLoading = true;
    private int authRetryCount = 0;
    private const int MAX_AUTH_RETRIES = 3;

    // Edit form fields
    private string editName = string.Empty;
    private string editEmail = string.Empty;
    private string editLocation = string.Empty;
    private string editBio = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Account page initialized");
        await CheckAuthenticationStateAsync();
    }

    private async Task CheckAuthenticationStateAsync()
    {
        try 
        {
            isLoading = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            
            if (authState.User.Identity?.IsAuthenticated ?? false)
            {
                Logger.LogInformation("User authenticated");
                await LoadUserData();
            }
            else
            {
                Logger.LogWarning("User not authenticated, attempt {RetryCount} of {MaxRetries}", 
                    authRetryCount + 1, MAX_AUTH_RETRIES);
                
                if (authRetryCount < MAX_AUTH_RETRIES)
                {
                    authRetryCount++;
                    await Task.Delay(500); // Wait briefly before retrying
                    await CheckAuthenticationStateAsync();
                }
                else
                {
                    Logger.LogWarning("Max authentication retries reached, redirecting to login");
                    RedirectToLogin();
                }
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            
            // Get the email from the ClaimTypes.Email claim
            var userEmail = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
            
            if (string.IsNullOrEmpty(userEmail))
            {
                Logger.LogWarning("Unable to determine current user email from auth state");
                return;
            }
            
            Logger.LogInformation("Loading profile for user with email: {Email}", userEmail);
            currentUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
            
            if (currentUser == null)
            {
                Logger.LogWarning("No user found with email: {Email}", userEmail);
            }
            else
            {
                Logger.LogInformation("Successfully loaded user profile for: {Name}", currentUser.Name);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user details");
        }
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", forceLoad: true);
    }

    private void ShowEditProfile()
    {
        editName = currentUser?.Name ?? string.Empty;
        editEmail = currentUser?.Email ?? string.Empty;
        editLocation = currentUser?.Location ?? string.Empty;
        editBio = currentUser?.Bio ?? string.Empty;
        imagePreviewUrl = null;
        newProfileImage = null;
        showEditProfile = true;
    }

    private void HideEditProfile()
    {
        showEditProfile = false;
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                using var stream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 1024 * 1024).CopyToAsync(stream); // Max 1MB
                newProfileImage = stream.ToArray();

                imagePreviewUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(newProfileImage)}";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading image");
        }
    }

    private async Task SaveProfile()
    {
        try
        {
            if (currentUser != null)
            {
                currentUser.Name = editName;
                currentUser.Email = editEmail;
                currentUser.Location = editLocation;
                currentUser.Bio = editBio;
                if (newProfileImage != null)
                {
                    currentUser.ProfileImage = newProfileImage;
                }

                await DbContext.SaveChangesAsync();
                Logger.LogInformation("Profile updated successfully");
                showEditProfile = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating profile");
        }
    }
}

<style>
    .profile-container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
    }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        color: white;
    }

    .profile-header {
        background: #444;
        padding-top: 40px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    }

    .profile-info-container {
        padding: 0 40px;
        display: flex;
        gap: 24px;
    }

    .profile-avatar {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        overflow: hidden;
        border: 4px solid #555;
    }

    .profile-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .profile-info {
        flex: 1;
        padding-top: 20px;
    }

    .profile-info h1 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
        color: white;
    }

    .location {
        color: #ccc;
        margin: 8px 0;
    }

    .bio {
        margin: 12px 0;
        line-height: 1.5;
        color: white;
    }

    .profile-actions {
        display: flex;
        gap: 12px;
        margin-top: 16px;
    }

    .button-suggested-action {
        padding: 8px 16px;
        background-color: #4a8fe7;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .button-suggested-action:hover {
        background-color: #3a7fd7;
    }

    .button-secondary {
        padding: 8px 16px;
        background-color: #555;
        color: white;
        border: 1px solid #777;
        border-radius: 4px;
        cursor: pointer;
    }

    .button-secondary:hover {
        background-color: #666;
    }

    .profile-stats {
        display: flex;
        padding: 24px 40px;
        gap: 48px;
        border-top: 1px solid #555;
        margin-top: 24px;
    }

    .stat-item {
        text-align: center;
    }

    .stat-value {
        font-size: 20px;
        font-weight: 600;
        color: white;
    }

    .stat-label {
        color: #ccc;
        font-size: 14px;
    }

    /* Modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal {
        background: #333;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        color: white;
    }

    .modal-header {
        padding: 16px 24px;
        border-bottom: 1px solid #555;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 20px;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #ccc;
    }

    .modal-body {
        padding: 24px;
    }

    .modal-footer {
        padding: 16px 24px;
        border-top: 1px solid #555;
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    .form-group {
        margin-bottom: 16px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #ccc;
    }

    .input-single-line {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #555;
        border-radius: 4px;
        background: #444;
        color: white;
    }

    .input-multi-line {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #555;
        border-radius: 4px;
        background: #444;
        color: white;
        min-height: 100px;
        resize: vertical;
    }

    .profile-upload {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
    }

    .file-input {
        width: 100%;
        padding: 8px;
        border: 1px dashed #555;
        border-radius: 4px;
        background: #444;
        color: white;
    }

    .image-preview {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
    }
</style> 