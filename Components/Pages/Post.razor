@page "/create-post"
@inject AppDbContext _dbContext
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using Data
@attribute [Authorize]
@inject ILogger<Profile> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Create Post</PageTitle>

<div class="subtle-container">
    @if (ShowToast)
    {
    <div class="toast @(ToastType == "error" ? "toast-error" : "toast-success")">
        @ToastMessage
    </div>
    }
    <button class="button-optional-action fill-width" @onclick="NavigateBack">‚Üê Back</button>
    <h1 class="center-text">Create Post</h1>

    <label for="subject">Subject</label>
    <input id="subject" type="text" class="input-single-line fill-width" @bind="Subject" maxlength="100" />

    <label for="description">Description</label>
    <textarea id="description" class="input-multi-line" maxlength="800" rows="6" @bind="Description" @oninput="UpdateCharacterCount"></textarea>
    <div class="flex-horizontal flex-end">
        <span class="font-small">@Description.Length / 800</span>
    </div>

    <InputFile OnChange="HandleImageUpload" multiple accept="image/*" />
    <div class="flex-vertical pad-top">
        <button class="button-optional-action" style="width: auto;" @onclick="TogglePreview">Preview</button>
    </div>
    <button class="button-suggested-action" style="width: auto;" @onclick="SubmitPost">Share</button>
</div>



@if (ShowPreview)
    {
    <div class="modal-backdrop" @onclick="ClosePreview">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="post-header">
                @if (loggedInUser?.ProfileImage != null)
                    {
                    var profileImgBase64 = $"data:image/png;base64,{Convert.ToBase64String(loggedInUser.ProfileImage)}";
                    <img src="@profileImgBase64" alt="User profile" class="avatar-image" />
                    }
                else
                {
                    <div class="avatar-placeholder"></div>
                }
                <div>
                    <strong>@loggedInUser?.Name</strong><br />
                    <span class="timestamp">@DateTime.Now.ToString("MM/dd/yyyy HH:mm")</span>
                </div>
            </div>

            <div class="post-content">
                <div class="subject"><strong>@Subject</strong></div>
                <div class="body">@Description</div>
            </div>
            @if (tempUploadedImages.Any())
            {
                <div class="image-preview-gallery">
                @foreach (var img in tempUploadedImages)
                {
                    var base64 = Convert.ToBase64String(img.ImageData);
                    var imageUrl = $"data:{img.ContentType};base64,{base64}";
                    <img src="@imageUrl" alt="Preview image" class="preview-image" />
                }
            </div>
            }

            <div class="post-actions">
                <span>üëç 0</span>
                <span>üí¨ 0</span>
            </div>

            <button class="button-suggested-action" @onclick="ClosePreview">Close</button>
        </div>
    </div>
}

@code {
    private Data.User? loggedInUser;
    private bool ShowPreview { get; set; } = false;
    private string Subject { get; set; } = "";
    private string Description { get; set; } = "";
    private List<PostImage> tempUploadedImages = new();
    private bool ShowToast { get; set; } = false;
    private string ToastMessage { get; set; } = "";
    private string ToastType { get; set; } = "success";
    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB - can be changed if needed
    private readonly string[] AllowedExtensions = { ".jpg", ".jpeg", ".png", ".gif" };

    //keeps track of character count in subject
    private void UpdateCharacterCount(ChangeEventArgs e)
    {
        Description = e.Value?.ToString() ?? "";
    }

    //toggles whether preview is selected
    private void TogglePreview()
    {
        ShowPreview = !ShowPreview;
    }

    //navigates back to feed page
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    //closes preview window
     private void ClosePreview()
    {
        ShowPreview = false;
    }

    //shows toast notification
    private async Task ShowToastMessage(string message, string type = "success")
    {
        ToastMessage = message;
        ToastType = type;
        ShowToast = true;
        await Task.Delay(3000);
        ShowToast = false;
        StateHasChanged();
    }

    //creates post in the database
    private async Task SubmitPost()
    {
         if (string.IsNullOrWhiteSpace(Subject) || string.IsNullOrWhiteSpace(Description))
            {
                await ShowToastMessage("Subject and description cannot be empty.", "error");
                return;
            }

        if (loggedInUser == null)
        {
            await ShowToastMessage("You must be logged in to create a post.", "error");
            return;
        }

        var newPost = new Data.Post
        {
            User = loggedInUser,
            UserId = loggedInUser.Id,
            Subject = Subject,
            Description = Description,
            Timestamp = DateTime.UtcNow,
            Comments = 0,
            Images = new List<PostImage>(tempUploadedImages)
        };

        _dbContext.Posts.Add(newPost);
        await _dbContext.SaveChangesAsync();


        Subject = "";
        Description = "";
        tempUploadedImages.Clear();
        ShowPreview = false;
        await ShowToastMessage("Post successfully published!");
    }

    //creates PostImage
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
{
    foreach (var file in e.GetMultipleFiles())
    {

        if (file.Size > MaxFileSize)
        {
            await ShowToastMessage($"File '{file.Name}' exceeds the maximum size of {MaxFileSize / (1024 * 1024)}MB.", "error");
            continue;
        }


        var extension = Path.GetExtension(file.Name).ToLowerInvariant();
        if (!AllowedExtensions.Contains(extension))
        {
            await ShowToastMessage($"File type '{extension}' is not allowed. Allowed types are: {string.Join(", ", AllowedExtensions)}.", "error");
            continue;
        }


        try
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream(MaxFileSize).CopyToAsync(stream);

            tempUploadedImages.Add(new PostImage
            {
                ImageData = stream.ToArray(),
                ContentType = file.ContentType
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to process file upload.");
            await ShowToastMessage($"An error occurred while uploading '{file.Name}'.", "error");
        }
    }
}


    //loads user data
    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }
    private async Task LoadUserData()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();


            var userEmail = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

            if (string.IsNullOrEmpty(userEmail))
            {
                Logger.LogWarning("Unable to determine current user email from auth state");
                return;
            }

            Logger.LogInformation("Loading profile for user with email: {Email}", userEmail);
            loggedInUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == userEmail);

            if (loggedInUser == null)
            {
                Logger.LogWarning("No user found with email: {Email}", userEmail);
            }
            else
            {
                Logger.LogInformation("Successfully loaded user profile for: {Name}", loggedInUser.Name);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user details");
        }
    }
}
