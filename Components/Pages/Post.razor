@page "/create-post"
@inject AppDbContext _dbContext
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using Data
@attribute [Authorize]
@inject ILogger<Account> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Create Post</PageTitle>

<div class="post-container">
    @if (ShowToast)
    {
    <div class="toast @(ToastType == "error" ? "toast-error" : "toast-success")">
        @ToastMessage
    </div>
    }
    
        <button class="btn-back" @onclick="NavigateBack">‚Üê Back</button>
        <h1>Create Post</h1>

    <div class="form-group">
        <label for="subject">Subject</label>
        <input id="subject" type="text" class="form-control" @bind="Subject" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description" class="form-control" maxlength="800" rows="6" @bind="Description" @oninput="UpdateCharacterCount"></textarea>
        <div class="char-counter">@Description.Length / 800</div>
    </div>

    <div class="form-group upload-container">
        <InputFile OnChange="HandleImageUpload" multiple accept="image/*" />
        <button class="btn-preview" @onclick="TogglePreview">Preview</button>
    </div>

    <button class="btn-share" @onclick="CreatePost">Share</button>
</div>



@if (ShowPreview)
    {
    <div class="modal-backdrop" @onclick="ClosePreview">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="post-header">
                @if (loggedInUser?.ProfileImage != null)
                    {
                    var profileImgBase64 = $"data:image/png;base64,{Convert.ToBase64String(loggedInUser.ProfileImage)}";
                    <img src="@profileImgBase64" alt="User profile" class="avatar-image" />
                    }
                else
                {
                    <div class="avatar-placeholder"></div>
                }
                <div>
                    <strong>@loggedInUser.Name</strong><br />
                    <span class="timestamp">@DateTime.Now.ToString("MM/dd/yyyy HH:mm")</span>
                </div>
            </div>

            <div class="post-content">
                <div class="subject"><strong>@Subject</strong></div>
                <div class="body">@Description</div>
            </div>
            @if (tempUploadedImages.Any())
            {
                <div class="image-preview-gallery">
                @foreach (var img in tempUploadedImages)
                {
                    var base64 = Convert.ToBase64String(img.ImageData);
                    var imageUrl = $"data:{img.ContentType};base64,{base64}";
                    <img src="@imageUrl" alt="Preview image" class="preview-image" />
                }
            </div>
            }

            <div class="post-actions">
                <span>üëç 0</span>
                <span>üí¨ 0</span>
            </div>

            <button class="close-btn" @onclick="ClosePreview">Close</button>
        </div>
    </div>
}

@code {
    private Data.User? loggedInUser;
    private bool ShowPreview { get; set; } = false;
    private string Subject { get; set; } = "";
    private string Description { get; set; } = "";
    

    private List<PostImage> tempUploadedImages = new();

    private void UpdateCharacterCount(ChangeEventArgs e)
    {
        Description = e.Value?.ToString() ?? "";
    }
    private void TogglePreview()
    {
        ShowPreview = !ShowPreview;
    }
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }
     private void ClosePreview()
    {
        ShowPreview = false;
    }

    private bool ShowToast { get; set; } = false;
    private string ToastMessage { get; set; } = "";
    private string ToastType { get; set; } = "success";

    private async Task ShowToastMessage(string message, string type = "success")
    {
        ToastMessage = message;
        ToastType = type;
        ShowToast = true;
        await Task.Delay(3000);
        ShowToast = false;
        StateHasChanged();
    }
    

    private async Task CreatePost()
    {
         if (string.IsNullOrWhiteSpace(Subject) || string.IsNullOrWhiteSpace(Description))
            {
                await ShowToastMessage("Subject and description cannot be empty.", "error");
                return;
            }

        if (loggedInUser == null)
        {
            await ShowToastMessage("You must be logged in to create a post.", "error");
            return;
        }

        var newPost = new Data.Post
        {
            User = loggedInUser,
            UserId = loggedInUser.Id,
            Subject = Subject,
            Description = Description,
            Timestamp = DateTime.UtcNow,
            Comments = 0,
            Images = new List<PostImage>(tempUploadedImages)
        };

        _dbContext.Posts.Add(newPost);
        await _dbContext.SaveChangesAsync();


        Subject = "";
        Description = "";
        tempUploadedImages.Clear();
        ShowPreview = false;
        await ShowToastMessage("Post successfully published!");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
       foreach (var file in e.GetMultipleFiles())
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10_000_000).CopyToAsync(stream);

            tempUploadedImages.Add(new PostImage
            {
                ImageData = stream.ToArray(),
                ContentType = file.ContentType
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }
    private async Task LoadUserData()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            
            // Get the email from the ClaimTypes.Email claim
            var userEmail = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
            
            if (string.IsNullOrEmpty(userEmail))
            {
                Logger.LogWarning("Unable to determine current user email from auth state");
                return;
            }
            
            Logger.LogInformation("Loading profile for user with email: {Email}", userEmail);
            loggedInUser = await _dbContext.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
            
            if (loggedInUser == null)
            {
                Logger.LogWarning("No user found with email: {Email}", userEmail);
            }
            else
            {
                Logger.LogInformation("Successfully loaded user profile for: {Name}", loggedInUser.Name);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user details");
        }
    }
}

<style>
    .post-container {
    background: #444;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        transition: box-shadow 0.2s ease;
        max-width: 400px;
        width: 100%;
        margin: 0 auto;
    }

    h1 {
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .form-group {
       width: 100%;
     /* Adjust this to control the width of the form inputs */
    display: flex;
    flex-direction: column;
    align-items: flex-start; /* Centers the input fields horizontally */
    margin-bottom: 1.5rem;
    }

    label {
        display: block;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: calc(100% - 20px);
        width: 100%;
        padding: 0.75rem;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 1rem;
        background-color: #555;
        color: white;
        box-sizing: border-box;  /* Ensures input does not overflow */
        margin-right: 20px; 
    }

    .form-control::placeholder {
        color: #aaa;
    }

    .char-counter {
        text-align: right;
        font-size: 0.9rem;
        color: #bbb;
        margin-top: 0.25rem;
    }

    .upload-container {
        display: flex;
        align-items: left;
        gap: 1rem;
    }

    .btn-preview, .btn-share,.btn-back {
        padding: 0.5rem 1.5rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;
        background-color: #2c3e50;
        color: white;
        
        
    }
    .btn-share {
        width: 100%;
        
    }

    .btn-preview:hover, .btn-share:hover {
        background-color: #34495e;
    }

    .modal-backdrop {
        position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent black */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    }

    .modal-content {
        background-color: #444;
        border-radius: 12px;
        padding: 2rem;
        
        width: 80%;
        position: relative;
        color: white;
    }

    .image-preview-gallery {
        margin-top: 1rem;
    }

    .preview-image {
        max-width: 100%;
        border-radius: 8px;
        margin-top: 0.75rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .post-actions {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .toast {
        position: fixed;
        top: 2rem;
        right: 2rem;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.2);
        color: white;
        font-weight: bold;
        z-index: 100;
    }

    .toast-error {
        background-color: #e74c3c;
    }

    .toast-success {
        background-color: #2ecc71;
    }

    .avatar-placeholder, .avatar-image {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        background-color: #ccc;
    }

    .post-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .timestamp {
        font-size: 0.85rem;
        color: #aaa;
    }

    .subject {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .body {
        font-size: 1rem;
        white-space: pre-wrap;
        line-height: 1.6;
    }

</style>
